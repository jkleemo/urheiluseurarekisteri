package seurarekisteri.test;
// Generated by ComTest BEGIN
import seurarekisteri.*;
import java.io.File;
import java.util.Iterator;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.20 21:26:45 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class ValineetTest {



  // Generated by ComTest BEGIN
  /** testGetValine42 */
  @Test
  public void testGetValine42() {    // Valineet: 42
    Valineet valineet = new Valineet(); 
    Valine valine1 = new Valine(), valine2 = new Valine(); 
    valine1.rekisteroi(); valine2.rekisteroi(); 
    assertEquals("From: Valineet line: 46", null, valineet.getValine(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa69 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa69() throws SailoException,CloneNotSupportedException {    // Valineet: 69
    Valineet valineet = new Valineet(); 
    Valine valine1 = new Valine(), valine2 = new Valine(); 
    valine1.rekisteroi(); valine2.rekisteroi(); 
    assertEquals("From: Valineet line: 75", 0, valineet.getLkm()); 
    valineet.korvaaTaiLisaa(valine1); assertEquals("From: Valineet line: 76", 1, valineet.getLkm()); 
    valineet.korvaaTaiLisaa(valine2); assertEquals("From: Valineet line: 77", 2, valineet.getLkm()); 
    Valine valine3 = valine1.clone(); 
    valine3.aseta(3,"kkk"); 
    Iterator<Valine> it = valineet.iterator(); 
    assertEquals("From: Valineet line: 81", true, it.next() == valine1); 
    valineet.korvaaTaiLisaa(valine3); assertEquals("From: Valineet line: 82", 2, valineet.getLkm()); 
    it = valineet.iterator(); 
    Valine v0 = it.next(); 
    assertEquals("From: Valineet line: 85", valine3, v0); 
    assertEquals("From: Valineet line: 86", true, v0 == valine3); 
    assertEquals("From: Valineet line: 87", false, v0 == valine1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTallenna115 
   * @throws SailoException when error
   */
  @Test
  public void testTallenna115() throws SailoException {    // Valineet: 115
    Lainat lainat = new Lainat(); 
    lainat.lueTiedostosta(); 
    lainat.tallenna(); 
    lainat = new Lainat(); 
    lainat.lueTiedostosta(); 
    lainat.tallenna(); 
    String hakemisto = "testi"; 
    String tiedNimi = hakemisto+"/nimet"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    assertEquals("From: Valineet line: 131", false, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    fbak.delete(); 
    assertEquals("From: Valineet line: 134", false, fbak.delete()); 
    assertEquals("From: Valineet line: 135", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa174 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa174() throws SailoException {    // Valineet: 174
    Valineet valineet = new Valineet(); 
    Valine eka = new Valine(); 
    Valine toka = new Valine(); 
    assertEquals("From: Valineet line: 179", 0, valineet.getLkm()); 
    valineet.lisaa(eka); assertEquals("From: Valineet line: 180", 1, valineet.getLkm()); 
    valineet.lisaa(toka); assertEquals("From: Valineet line: 181", 2, valineet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista195 
   * @throws SailoException when error
   */
  @Test
  public void testPoista195() throws SailoException {    // Valineet: 195
    Valineet valineet = new Valineet(); 
    Valine valine1 = new Valine(), valine2 = new Valine(), valine3 = new Valine(); 
    valine1.rekisteroi(); valine2.rekisteroi(); valine3.rekisteroi(); 
    int id1 = valine1.getValineID(); 
    valineet.lisaa(valine1); valineet.lisaa(valine2); valineet.lisaa(valine3); 
    assertEquals("From: Valineet line: 202", 1, valineet.poista(id1+1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId218 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId218() throws SailoException {    // Valineet: 218
    Valineet valineet = new Valineet(); 
    Valine valine1 = new Valine(), valine2 = new Valine(), valine3 = new Valine(); 
    valine1.rekisteroi(); valine2.rekisteroi(); valine3.rekisteroi(); 
    int id1 = valine1.getValineID(); 
    valineet.lisaa(valine1); valineet.lisaa(valine2); valineet.lisaa(valine3); 
    assertEquals("From: Valineet line: 225", 1, valineet.etsiId(id1+1)); 
    assertEquals("From: Valineet line: 226", 2, valineet.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta240 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta240() throws SailoException {    // Valineet: 240
    Valineet valineet = new Valineet(); 
    Valine valine1 = new Valine(), valine2 = new Valine(); 
    valine1.taytaValine(); 
    valine2.taytaValine(); 
    valineet.lueTiedostosta(); 
    valineet.tallenna(); 
    valineet = new Valineet(); 
    valineet.lueTiedostosta(); 
    valineet.tallenna(); 
    String hakemisto = "testi"; 
    String tiedNimi = hakemisto+"/nimet"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    assertEquals("From: Valineet line: 259", false, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    fbak.delete(); 
    assertEquals("From: Valineet line: 262", false, fbak.delete()); 
    assertEquals("From: Valineet line: 263", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testValineetIterator315 
   * @throws SailoException when error
   */
  @Test
  public void testValineetIterator315() throws SailoException {    // Valineet: 315
    Valineet valineet = new Valineet(); 
    Valine pallo1 = new Valine(), pallo2 = new Valine(); 
    pallo1.rekisteroi(); pallo2.rekisteroi(); 
    valineet.lisaa(pallo1); 
    valineet.lisaa(pallo2); 
    valineet.lisaa(pallo1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Valine valine:valineet)
    ids.append(" "+valine.getValineID()); 
    String tulos = " " + pallo1.getValineID() + " " + pallo2.getValineID() + " " + pallo1.getValineID(); 
    assertEquals("From: Valineet line: 333", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Valine>  i=valineet.iterator(); i.hasNext(); ) {
    Valine valine = i.next(); 
    ids.append(" "+valine.getValineID()); 
    }
    assertEquals("From: Valineet line: 341", tulos, ids.toString()); 
    Iterator<Valine>  i=valineet.iterator(); 
    assertEquals("From: Valineet line: 344", true, i.next() == pallo1); 
    assertEquals("From: Valineet line: 345", true, i.next() == pallo2); 
    assertEquals("From: Valineet line: 346", true, i.next() == pallo1); 
    try {
    i.next(); 
    fail("Valineet: 348 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi400 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi400() throws SailoException {    // Valineet: 400
    Valineet valineet = new Valineet(); 
    Valine valine1 = new Valine(); valine1.parse("1|Sukset #1|Fischer|2021|Ei lainassa"); 
    Valine valine2 = new Valine(); valine2.parse("2|Sukset #1|Fischer|2021|Ei lainassa"); 
    Valine valine3 = new Valine(); valine3.parse("3|Sukset #1|Fischer|2021|Ei lainassa"); 
    Valine valine4 = new Valine(); valine4.parse("4|Sukset #1|Fischer|2021|Ei lainassa"); 
    Valine valine5 = new Valine(); valine5.parse("5|Sukset #1|Fischer|2021|Ei lainassa"); 
    valineet.lisaa(valine1); valineet.lisaa(valine2); valineet.lisaa(valine3); valineet.lisaa(valine4); valineet.lisaa(valine5); 
    List<Valine> loytyneet; 
    loytyneet = (List<Valine>)valineet.etsi(null,-1); 
    assertEquals("From: Valineet line: 411", 5, loytyneet.size()); 
  } // Generated by ComTest END
}